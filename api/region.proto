// Copyright (c) 2018-2021 Contributors as noted in the AUTHORS file
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

option go_package = ".;proto";

package hege.reg;

// Restricted to administrators
service Admin {
  // Instantiate a region on the target server
  rpc CreateRegion(RegionCreateReq) returns (Created) {}

  // PushStats extracts the usage in-game stats of each city in the given
  // region and pushes them to the collector.
  rpc PushStats(RegionId) returns (None) {}
}

// Restricted to game masters
service GameMaster {
  // Have all the Cities on the Region to produce their resources
  rpc Produce(RegionId) returns (None) {}

  // Make all the armies on the Region to move on step
  rpc Move(RegionId) returns (None) {}

  // Compute core statistics for the whole region.
  rpc GetStats(RegionId) returns (stream CityStatsRecord) {}

  rpc GetDetail(CityId) returns (CityView) {}

  rpc LifecycleConfigure(LifecycleConfigureReq) returns (None) {}
  rpc LifecycleAssign(LifecycleAssignReq) returns (None) {}
  rpc LifecycleResume(LifecycleAbstractReq) returns (None) {}
  rpc LifecycleDismiss(LifecycleAbstractReq) returns (None) {}
  rpc LifecycleSuspend(LifecycleAbstractReq) returns (None) {}
  rpc LifecycleReset(LifecycleAbstractReq) returns (None) {}
}

// Read-Only, Publicly available
service Public {
  rpc ListRegions(RegionListReq) returns (stream RegionSummary) {}

  // Paginated query of all the cities of the region.
  // Only a summary of the cities are returned.
  rpc AllCities (PaginatedU64Query) returns (stream CityKey) {}
}

// Restricted to a Game Master
service Templates {
  rpc ListTemplates (PaginatedStrQuery) returns (stream CityTemplate) {}
  rpc CreateTemplate (CityTemplateReq) returns (Created) {}
  rpc UpdateTemplate (CityTemplateReq) returns (None) {}
  rpc DeleteTemplate (TemplateId) returns (None) {}
}

// Read-Only, Publicly available
service Definitions {
  // Return (a page of) a list of all the Units that are possible in the world
  rpc ListUnits (PaginatedStrQuery) returns (stream UnitTypeView) {}

  // Return (a page of) a list of all the Buildings that are possible in the world
  rpc ListBuildings (PaginatedStrQuery) returns (stream BuildingTypeView) {}

  // Return (a page of) a list of all the Knowledge that are possible in the world
  rpc ListKnowledges (PaginatedStrQuery) returns (stream KnowledgeTypeView) {}
}

// Restricted to registered users
service Player {
  rpc LifecycleConfigure(LifecycleConfigureReq) returns (None) {}
  rpc LifecycleAcquire(CityId) returns (None) {}
  rpc LifecycleLeave(CityId) returns (None) {}
  rpc LifecycleAuto(CityId) returns (None) {}
}

// Restricted to registered users
service City {
  // Paginated query of the cities owned by the given user.
  // Only a summary of the cities are returned.
  rpc List (CitiesByOwnerReq) returns (stream CityKey) {}

  // Returns a complete view of the City
  // TODO(jfs): the request might fail because of a too large object
  //            to be replied.
  rpc ShowAll (CityId) returns (CityView) {}

  // Start the study of a knowledge whose type is specified by its unique ID.
  // If the conditions are not met, an error is returned.
  rpc Study (StudyReq) returns (None) {}

  // Start the construction of a building whose type is specified by its unique ID.
  // If the conditions are not met, an error is returned.
  rpc Build (BuildReq) returns (None) {}

  // Start the training of a Unit whose type is specified by its unique ID.
  // If the conditions are not met, an error is returned.
  rpc Train (TrainReq) returns (None) {}

  // Create an army around a set of units.
  // The set of units must not be empty and all the units must stay in the given City.
  rpc CreateArmy (CreateArmyReq) returns (None) {}

  // Create an army around a pile of resources, with a given destination.
  // The army immediately preempts the stock in the reserve of the City
  // and starts it movement. That army will have no aggressivity.
  rpc CreateTransport (CreateTransportReq) returns (None) {}

  // Transfer a Unit from the given City to the given Army.
  // The City must control the Army and the Unit must be in the City.
  rpc TransferUnit (TransferUnitReq) returns (None) {}

  // Transfer a pile of Resources from the given City to the given Army.
  // The City must control the Army and the Stock must hold the amount of Resources.
  rpc TransferResources (TransferResourcesReq) returns (None) {}

  // Return the list of armies that can be controlled by the given City
  rpc ListArmies (CityId) returns (stream ArmyName) {}
}

// Restricted to registered users
service Army {
  // Return a detailed view of the given Army
  rpc Show (ArmyId) returns (ArmyView) {}

  // Destroy the army and return all its content to the local city
  // Only works when the city is at home.
  rpc Cancel (ArmyId) returns (None) {}

  // Make the Army flea the fight it is involved in.
  rpc Flea (ArmyId) returns (None) {}

  // Make the Army flip in the fight it is involved in.
  rpc Flip (ArmyId) returns (None) {}

  // Append the specified command on the list of the Army.
  rpc Move (ArmyMoveReq) returns (None) {}

  // Append the specified command on the list of the Army.
  rpc Wait (ArmyTarget) returns (None) {}

  // Append the specified command on the list of the Army.
  rpc Attack (ArmyAssaultReq) returns (None) {}

  // Append the specified command on the list of the Army.
  rpc Defend (ArmyTarget) returns (None) {}

  // Append the specified command on the list of the Army.
  rpc Disband (ArmyTarget) returns (None) {}
}



message RegionSummary {
  string name = 1;
  string mapName = 2;
  uint32 countCities = 3;
  uint32 countFights = 4;
  // TODO(jfs): Add per-state gauges
}

message RegionId {
  string region = 1;
}



message ArmyName {
  string id = 1;
  string name = 2;
}

// Identifies an army managed by the city
message ArmyId {
  string region = 1;
  uint64 city = 2;
  string army = 3;
}

message ArmyView {
  string id = 1;
  string name = 2;
  uint64 location = 3;
  ResourcesAbs stock = 4;
  repeated UnitView units = 5;
  repeated ArmyCommand commands = 6;
}



message TemplateId {
  string region = 1;
  string id = 2;
}



message ResourcesAbs {
  uint64 r0 = 1;
  uint64 r1 = 2;
  uint64 r2 = 3;
  uint64 r3 = 4;
  uint64 r4 = 5;
  uint64 r5 = 6;
}

message ResourcesPlus {
  int64 r0 = 1;
  int64 r1 = 2;
  int64 r2 = 3;
  int64 r3 = 4;
  int64 r4 = 5;
  int64 r5 = 6;
}

message ResourcesMult {
  double r0 = 1;
  double r1 = 2;
  double r2 = 3;
  double r3 = 4;
  double r4 = 5;
  double r5 = 6;
}

message ResourcesMod {
  ResourcesPlus plus = 1;
  ResourcesMult mult = 2;
}

message StockView {
  ResourcesAbs base = 1;
  ResourcesMod knowledge = 2;
  ResourcesMod buildings = 3;
  ResourcesMod troops = 4;
  ResourcesAbs actual = 5;

  ResourcesAbs usage = 6;
}

message ProductionView {
  ResourcesAbs base = 1;
  ResourcesMod knowledge = 2;
  ResourcesMod buildings = 3;
  ResourcesMod troops = 4;
  ResourcesAbs actual = 5;
}



message UnitTypeView {
  string id = 1;
  string name = 2;
  uint32 ticks = 3;
  uint32 health = 4;
}

message UnitView {
  // Lazily populated
  UnitTypeView type = 1;

  string id = 2;
  string idType = 3;
  uint32 ticks = 4;
  uint32 health = 5;
}



message BuildingTypeRef {
  string id = 1;
  string name = 2;
  uint32 ticks = 3;
}

message BuildingTypePublic {
  ResourcesAbs cost0 = 1;
  ResourcesAbs cost = 2;
  ResourcesMod stock = 3;
  ResourcesMod prod = 4;
  bool multiple = 5;
}

message BuildingTypePrivate {
  int64 popBuild = 1;
  int64 popFall = 2;
  int64 popDestroy = 3;
  int64 popDismantle = 4;
  repeated string requires = 5;
  repeated string conflicts = 6;
}

message BuildingTypeView {
  BuildingTypeRef ref = 1;
  BuildingTypePublic public = 2;
  BuildingTypePrivate private = 3;
}

message BuildingView {
  BuildingTypeRef type = 1;
  string id = 2;
  string idType = 3;
  uint32 ticks = 4;
}



message KnowledgeTypeView {
  string id = 1;
  string name = 2;
  uint32 ticks = 3;
}

message KnowledgeView {
  KnowledgeTypeView type = 1;
  string id = 2;
  string idType = 3;
  uint32 ticks = 4;
}



// Fully identifies a City.
message CityId {
  string region = 1;
  uint64 city = 2;
}

message CityKey {
  string region = 1;
  uint64 city = 2;
  string name = 3;
}

message CityConstants {
  int32 alignment = 1;
  int32 chaos = 2;
  uint32 politics = 3;
  uint32 cult = 4;
  uint32 ethny = 5;
}

message CityVars {
  int64 permPop = 2;
  int64 permHealth = 3;
  int64 permIntelligence = 4;
  uint32 tickMassacres = 5;
}

message CityPolitics {
  uint64 overlord = 1;
  repeated uint64 lieges = 2;
}

message CityStats {
  // Gauges
  ResourcesAbs stockCapacity = 1;
  ResourcesAbs stockUsage = 2;
  uint64 scoreBuilding = 3;
  uint64 scoreKnowledge = 4;
  uint64 scoreArmy = 5;
  int64 popularity = 6;
  // Counters
  ResourcesAbs resourceProduced = 8;
  ResourcesAbs resourceSent = 9;
  ResourcesAbs resourceReceived = 10;
  ResourcesAbs taxSent = 11;
  ResourcesAbs taxReceived = 12;
  uint64 moves = 13;
  uint64 unitRaised = 14;
  uint64 unitLost = 15;
  uint64 fightJoined = 16;
  uint64 fightLeft = 17;
  uint64 fightWon = 18;
  uint64 fightLost = 19;
}

message CityEvolution {
  repeated KnowledgeTypeView kFrontier = 1;
  repeated BuildingTypeRef bFrontier = 2;
  repeated UnitTypeView uFrontier = 3;
}

message CityAssets {
  repeated UnitView units = 1;
  repeated BuildingView buildings = 2;
  repeated KnowledgeView knowledges = 3;
  repeated ArmyView armies = 4;
}

message CityTemplate {
  string region = 1;
  string name = 2;
  CityConstants constants = 3;
  ResourcesAbs stock = 4;
  ResourcesAbs stockCapacity = 5;
  ResourcesAbs production = 6;
  repeated string buildingTypes = 7;
  repeated string skillTypes = 8;
  repeated string unitTypes = 9;
}

message CityView {
  CityKey key = 1;

  string owner = 2;
  uint32 state = 3;

  CityPolitics politics = 7;

  CityConstants constants = 4;

  CityVars variables = 6;

  // The resources owned by the City
  StockView stock = 8;

  ProductionView production = 9;

  // All the things owned by the current city
  CityAssets assets = 10;

  // All the things that the current may start to own
  CityEvolution evol = 11;
}



message Artifact {
  string id = 1;
  string idType = 2;
  string name = 3;
}



message CityStatsRecord {
  CityKey city = 1;
  CityStats stats = 2;
}

message LifecycleAbstractReq {
  CityId city = 1;
}

message LifecycleAssignReq {
  CityId city = 1;
  string user = 2;
}

message StudyReq {
  CityId city = 1;
  string knowledgeType = 2;
}

message TrainReq {
  CityId city = 1;
  string unitType = 2;
}

message BuildReq {
  CityId city = 1;
  string buildingType = 2;
}

message CreateTransportReq {
  CityId city = 1;
  string name = 2;
  uint64 target = 3;
  ResourcesAbs stock = 4;
}

message CreateArmyReq {
  CityId city = 1;
  string name = 2;
  repeated string unit = 3;
}

message TransferUnitReq {
  CityId city = 1;
  string army = 3;
  repeated string unit = 4;
}

message TransferResourcesReq {
  CityId city = 1;
  string army = 3;
  ResourcesAbs stock = 4;
}

message CitiesByOwnerReq {
  string region = 1;
  string user = 2;
  uint64 marker = 3;
}

message RegionListReq {
  string nameMarker = 1;
}

message RegionCreateReq {
  string name = 1;
  string mapName = 2;
}

message LifecycleConfigureReq {
  string region = 1;
  uint64 city = 2;
  string model = 3;
}

message CityTemplateReq {
  string region = 1;
  // Optional
  string id = 2;
  // Optional
  CityTemplate tpl = 3;
}

enum ArmyCommandType {
  // A value that should not be encountered.
  Unknown = 0;
  // Move to the location, disband the army and transfer the units to the
  // local city, if any
  Disband = 1;
  // Move to the location and hold the position. Like 'Move' but the
  // Useful to let the attitude play and enter attack/defense on local fights
  Wait = 2;
  // Move to the location. The command expires at the arrival at the position.
  // Useful to let the attitude play and enter attack/defense on local fights
  Move = 3;
  // Move to the location and join the attack of the city
  Attack = 4;
  // Move to the location and join the defense of the local city
  Defend = 5;
}

message ArmyMoveReq {
  ArmyId id = 1;
  uint64 target = 2;
  // What to do at the destination
  ArmyMoveArgs args = 3;
}

message ArmyMoveArgs {
  // Resources to be given to the local City
  ResourcesAbs stock = 1;
  // Artifacts to be dropped
  repeated uint64 artifacts = 2;
  // Units to be transferred to the local City
  repeated uint64 units = 3;
};

message ArmyAssaultReq {
  ArmyId id = 1;
  // Unique ID of the map cell (which must have a city settled)
  uint64 target = 2;
  // What to do upon victory
  ArmyAssaultArgs args = 3;
}

message ArmyAssaultArgs {
  // Massacre the peasants to force a production drop
  bool massacre = 1;
  // Become overlord of the victim, in case of victory
  bool overlord = 2;
  // Break a random building, in case of victory
  bool break = 3;
}

message ArmyTarget {
  ArmyId id = 1;
  uint64 target = 2;
}

message ArmyCommand {
  uint64 target = 1;

  ArmyCommandType type = 2;
  // Optional field that may be set in case of move
  ArmyMoveArgs move = 3;
  // Optional field that may be set in case of attack
  ArmyAssaultArgs attack = 4;
}



message None {}

message Created {
  string id = 1;
}

message PaginatedU64Query {
  string region = 1;
  uint64 marker = 2;
}

message PaginatedStrQuery {
  string region = 1;
  string marker = 2;
}
