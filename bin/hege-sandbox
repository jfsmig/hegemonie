#!/bin/bash
# Copyright (c) 2018-2021 Contributors as noted in the AUTHORS file
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

set -euxo pipefail

THIS_FILE=$(realpath "${BASH_SOURCE[0]}")
THIS_DIR=$(dirname "${THIS_FILE}")
REPO=$(readlink -e "${THIS_DIR}/..")

function error() {
  echo $@ 1>&2
  exit 2
}

function finish() {
	set +e
	kill %2 %1
	wait
}

function config() {
	D=$(mktemp -p '' -d hege-sandbox-XXXXXXXXXXXX)
	cd "$REPO"

	if [[ $# -gt 0 ]] ; then
		BASE="$1"
	else
		BASE="$D"
	fi

	cp -rp "$REPO/etc" "$D/etc"
	mkdir -p \
		"$D/var/lib/hegemonie/events" \
		"$D/var/lib/hegemonie/regions"

	# Generate a self-signed certificate, one certificate for the (inner) gRPC
	# services and on certificate for the (outer) gateways
	./bin/hege-pki ca "$D/etc/hegemonie/pki"
	for t in inner outer ; do
		./bin/hege-pki srv "$D/etc/hegemonie/pki" "$t"
	done

	# Prepare the configuration for each gRPC service
	sed -i "s;@@BASE@@;$BASE;" $(find "$D/etc" -type f)

	# Generate sample maps destined to the gRPC maps service
	./bin/hege-map-transform.sh ./docs/maps/ "$D/etc/hegemonie/maps"

	# Generate sample world definitions destined to the gRPC regions service
	cp -rp ./docs/definitions/hegeIV "$D/etc/hegemonie/definitions"

	cat >>"$D/enable" <<EOF
alias hc='hege client -f $D/etc/hegemonie/config.yml'
EOF

	echo "$D"
}

function run() {
	if [[ $# -lt 1 ]] ; then error "Missing a configuration path" ; fi
	if [[ -z "$1" ]] ; then error "Invalid configuration path" ; fi
	D=$1
	if ! [[ -d "$D" ]] ; then error "The configuration path is not a directory" ; fi
	cd "$D"

	trap finish SIGTERM SIGINT EXIT

	# Start a single all-in-oone service
	hege server -f "$D/etc/hegemonie/config.yml" all &

	# A quick check to see if all the services answer
	hege client -f "$D/etc/hegemonie/config.yml" maps list

	wait
}

function run_with_docker() {
	[[ $# -ge 1 ]]
	[[ -n "$1" ]]
	D=$1
	[[ -d "$D" ]]
	cd "$D"

	trap finish SIGTERM SIGINT EXIT

	docker-compose \
	  -f etc/docker/docker-compose-base.yml \
	  -f etc/docker/docker-compose-aaa.yml \
	  -f etc/docker/docker-compose-o11n.yml \
	  up &

	# A quick check to see if all the services answer
	hege client -f "$D/etc/hegemonie/config.yml" maps list

	wait
}

function usage() {
	set +x
	F=$(basename $0)
	W=$(echo $F | tr [:graph:] ' ')
	echo "Usage: $0 [config|run|help]"
	echo "  $F help                   : display this help section"
	echo "  $F config                 : generate a sandbox config. and dump its path on stdout"
	echo "  $F run PATH_TO_SANDBOX    : run a sandbox env. configured in the given directory"
	echo "  $F docker PATH_TO_SANDBOX : run a sandbox env. with docker-compose"
	echo "  $F                        : shortcut to generate a config and run it"
	echo "  $W                          (a.k.a \"$F run \$($F config)\")"
	set -x
}

if [[ $# -eq 0 ]] ; then
  cfg=$($0 config)
	exec $0 run "$cfg"
else
	action=$1 ; shift
	case "$action" in
		help) usage ; exit 0 ;;
		config) config $@ ;;
		run) run $@ ;;
		docker) run_with_docker $@ ;;
	esac
fi

